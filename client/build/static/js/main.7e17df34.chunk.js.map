{"version":3,"sources":["aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["awsmobile","TextArea","Input","Amplify","configure","aws_exports","App","props","handleChange","e","setState","message","target","value","handleSubmit","state","object","username","console","log","fetch","method","body","JSON","stringify","headers","then","res","json","result","catch","err","name","dob","email","phone_number","Auth","currentAuthenticatedUser","attributes","preferred_username","newUser","this","className","onClick","rows","placeholder","onChange","Component","withAuthenticator","signUpConfig","hiddenDefaults","defaultCountryCode","signUpFields","label","key","required","displayOrder","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"qSAYeA,EAVG,CACd,mBAAsB,YACtB,6BAAgC,iDAChC,mBAAsB,YACtB,kBAAqB,sBACrB,6BAAgC,6BAChC,MAAS,I,iBCILC,G,qBAAaC,IAAbD,UAERE,UAAQC,UAAUC,GAElB,IA8BMC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAyCRC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,QAASF,EAAEG,OAAOC,SA3CjB,EA8CnBC,aAAe,WAAO,IAAD,EACW,EAAKC,MAC7BC,EAAS,CACbC,SAHiB,EACXA,SAGNN,QAJiB,EACDA,SAKlBO,QAAQC,IAAIH,GACZI,MAAM,8BAA+B,CACnCC,OAAQ,OACRC,KAAMC,KAAKC,UAAUR,GACrBS,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAYX,QAAQC,IAAIU,MAC7BC,OAAM,SAAAC,GAAG,OAAIb,QAAQC,IAAIY,OA5D1B,EAAKhB,MAAQ,CACXE,SAAU,GACVe,KAAM,GACNC,IAAK,GACLC,MAAO,GACPC,aAAc,GACdxB,QAAS,IARM,E,gEAcE,IAAD,OAClByB,IAAKC,2BACJX,MAAK,SAACC,GACL,EAAKjB,SAAS,CACZwB,MAAOP,EAAIW,WAAWJ,MACtBF,KAAML,EAAIW,WAAWN,KACrBG,aAAcR,EAAIW,WAAWH,aAC7BlB,SAAWU,EAAIW,WAAWC,mBAC1BC,QAAS,KACR,WAAO,IAAD,EACoB,EAAKzB,MAAxBE,EADD,EACCA,SACFN,EAAU,CACdqB,KAHK,EACWA,KAGhBf,SAAUA,GAEZG,MAAM,8BAAD,OAA+BH,GAAY,CAC9CI,OAAQ,OACRC,KAAMC,KAAKC,UAAUb,GACrBc,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBE,OAAM,SAAAC,GAAG,OAAIb,QAAQC,IAAIY,c,+BA8BtB,IAAD,SACsBU,KAAK1B,MAAjBJ,GADV,EACC6B,QADD,EACU7B,SACjB,OACE,yBAAK+B,UAAU,iBACb,kBAAC,IAAD,CAAQC,QAAS,WAAO,EAAK7B,iBAA7B,cACA,kBAACb,EAAD,CAAU2C,KAAM,EAAGC,YAAY,WAAWC,SAAUL,KAAKjC,eACzD,gCAAMG,EAAN,U,GA1EUoC,aAgFHC,cAAkB1C,EAAK,CAAE2C,aA9GnB,CACnBC,eAAgB,CAAC,YACjBC,mBAAoB,IACpBC,aAAc,CAAC,CACbC,MAAO,OACPC,IAAK,OACLC,UAAU,EACVC,aAAc,EACdC,KAAM,UAER,CACEJ,MAAO,WACPC,IAAK,qBACLC,UAAU,EACVC,aAAc,EACdC,KAAM,UAER,CACEJ,MAAO,gBACPC,IAAK,YACLC,UAAU,EACVC,aAAc,EACdC,KAAM,YC1BUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACLvD,QAAQuD,MAAMA,EAAM9D,c","file":"static/js/main.7e17df34.chunk.js","sourcesContent":["// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_cognito_identity_pool_id\": \"us-east-2:dfb84f3e-c202-46f4-94a4-92ccf2c54b80\",\n    \"aws_cognito_region\": \"us-east-2\",\n    \"aws_user_pools_id\": \"us-east-2_w0hR2SGIt\",\n    \"aws_user_pools_web_client_id\": \"4jjmu9ck8722jdpo4vq8lqhflj\",\n    \"oauth\": {}\n};\n\n\nexport default awsmobile;\n","import React, { Component } from 'react';\nimport Amplify, { Auth } from 'aws-amplify';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport aws_exports from './aws-exports';\nimport { Input, Button } from 'antd';\n\n\nimport './App.css';\nimport '@aws-amplify/ui/dist/style.css';\nimport 'antd/dist/antd.css';\n\n\nconst { TextArea } = Input;\n\nAmplify.configure(aws_exports);\n\nconst signUpConfig = {\n  hiddenDefaults: [\"username\"],\n  defaultCountryCode: '1',\n  signUpFields: [{\n    label: \"Name\",\n    key: 'name',\n    required: true,\n    displayOrder: 1,\n    type: 'string'\n  },\n  {\n    label: \"Username\",\n    key: 'preferred_username',\n    required: true,\n    displayOrder: 2,\n    type: 'string'\n  },\n  {\n    label: \"Data of Birth\",\n    key: 'birthdate',\n    required: true,\n    displayOrder: 3,\n    type: 'date'\n  }\n  ]\n\n\n}\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      name: '',\n      dob: '',\n      email: '',\n      phone_number: '',\n      message: ''\n    }\n  }\n\n\n\n  componentDidMount() {\n    Auth.currentAuthenticatedUser()\n    .then((res) => {\n      this.setState({ \n        email: res.attributes.email,\n        name: res.attributes.name,\n        phone_number: res.attributes.phone_number,\n        username : res.attributes.preferred_username,\n        newUser: ''\n      }, () => {\n        const { username, name } = this.state;\n        const message = {\n          name: name,\n          username: username\n        }\n        fetch(`http://localhost:8080/user/${username}`, {\n          method: 'POST',\n          body: JSON.stringify(message),\n          headers: {\n            'content-type': 'application/json'\n          }\n        })\n        .then((res) => res.json())\n        .catch(err => console.log(err));\n      })\n    });\n  }\n\n  handleChange = (e) => {\n    this.setState({ message: e.target.value});\n  }\n\n  handleSubmit = () => {\n    const { username, message } = this.state;\n    const object = {\n      username: username,\n      message: message\n    }\n    console.log(object);\n    fetch(\"http://localhost:8080/post/\", {\n      method: 'POST',\n      body: JSON.stringify(object),\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n    .then((res) => res.json())\n    .then((result) => console.log(result))\n    .catch(err => console.log(err));\n  }\n\n\n\n  render() { \n    const { newUser, message } = this.state;\n    return (  \n      <div className=\"App-Contianer\">\n        <Button onClick={() => {this.handleSubmit()}}> Add User </Button>\n        <TextArea rows={4} placeholder=\"Username\" onChange={this.handleChange}/>\n        <h1> {message} </h1>\n      </div>\n    );\n  }\n}\n \nexport default withAuthenticator(App, { signUpConfig });\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}